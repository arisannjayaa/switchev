<?php

namespace App\Http\Controllers;

use App\Helpers\Helper;
use App\Http\Requests\ConversionRequest;
use App\Services\Conversion\ConversionService;
use Illuminate\Http\Request;

class ConversionController extends Controller
{
    protected $conversionService;
    public function __construct(ConversionService $conversionService)
    {
        $this->conversionService = $conversionService;
    }

    public function index()
    {
        return $this->conversionService->checkStatusUser();
    }

    public function form($id = null)
    {
        if (auth()->user()->isGuest() && auth()->user()->isVerified()) {
            $data['conversion'] = @$this->conversionService->find($id)->getResult();
            return view('apps.conversion.form', $data);
        }
    }

    public function upsert(ConversionRequest $request)
    {
        if (auth()->user()->isAdmin()) {
            return abort(403);
        }

        $data = $request->only(['type',
            'workshop',
            'address',
            'person_responsible',
            'whatapp_responsible',
            'application_letter',
            'technician_competency',
            'equipment',
            'sop',
            'wiring_diagram',
            'status',
            'id']);
        return $this->conversionService->upsert($data)->toJson();
    }

    public function table()
    {
        if (!auth()->user()->isAdmin()) {
            return abort(403);
        }

        return $this->conversionService->table();
    }

    public function show($id)
    {
        if (!auth()->user()->isAdmin()) {
            return abort(403);
        }

        $data['conversion'] = $this->conversionService->findOrFail(Helper::decrypt($id))->getResult();
        $data['attachments'][] = $data['conversion']->application_letter;
        $data['attachments'][] = $data['conversion']->equipment;
        $data['attachments'][] = $data['conversion']->technician_competency;
        $data['attachments'][] = $data['conversion']->sop;
        $data['attachments'][] = $data['conversion']->wiring_diagram;

        return view('apps.conversion.detail', $data);
    }

    public function approve(Request $request)
    {
        dd($request);
        if (!auth()->user()->isAdmin()) {
            return abort(403);
        }

        return $this->conversionService->approve($request->id)->toJson();
    }

    public function reject(Request $request)
    {
        if (!auth()->user()->isAdmin()) {
            return abort(403);
        }

        return $this->conversionService->reject($request->id)->toJson();
    }

    public function verification($id)
    {
        $data['conversion'] = $this->conversionService->findOrFail(Helper::decrypt($id))->getResult();
        $data['attachments'][] = $data['conversion']->application_letter;
        $data['attachments'][] = $data['conversion']->equipment;
        $data['attachments'][] = $data['conversion']->technician_competency;
        $data['attachments'][] = $data['conversion']->sop;
        $data['attachments'][] = $data['conversion']->wiring_diagram;
        return view('apps.conversion.verification', $data);
    }
}
