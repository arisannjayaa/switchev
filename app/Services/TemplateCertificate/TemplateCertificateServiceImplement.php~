<?php

namespace App\Services\TemplateCertificate;

use App\Helpers\Helper;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\URL;
use LaravelEasyRepository\ServiceApi;
use App\Repositories\TemplateCertificate\TemplateCertificateRepository;
use Yajra\DataTables\Facades\DataTables;

class TemplateCertificateServiceImplement extends ServiceApi implements TemplateCertificateService{

    /**
     * set title message api for CRUD
     * @param string $title
     */
     protected $title = "";
     /**
     * uncomment this to override the default message
     * protected $create_message = "";
     * protected $update_message = "";
     * protected $delete_message = "";
     */

     /**
     * don't change $this->mainRepository variable name
     * because used in extends service class
     */
     protected $mainRepository;

    public function __construct(TemplateCertificateRepository $mainRepository)
    {
      $this->mainRepository = $mainRepository;
    }

    public function table()
    {
        return DataTables::of($this->mainRepository->table())
            ->addIndexColumn()
            ->addColumn('attachment_url', function ($row) {
                return '<a class="btn" href="'.route('secure.file', ['path' => Helper::encrypt($row->attachment)]).'" >Lampiran</a>';
            })
            ->addColumn('action', function ($row) {
                $menu = '<a class="dropdown-item detail" href="'.route('template.form', ['id' => Helper::encrypt($row->id)]).'" data-id="'.$row->id.'">
                                  Edit
                                </a>';
                $html = '<span class="dropdown">
                              <button class="btn dropdown-toggle align-text-top" data-bs-boundary="viewport" data-bs-toggle="dropdown" aria-expanded="false">
                                  <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-dots-circle-horizontal"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" /><path d="M8 12l0 .01" /><path d="M12 12l0 .01" /><path d="M16 12l0 .01" /></svg></button>
                              <div class="dropdown-menu dropdown-menu-end" style="">
                                    '.$menu.'
                              </div>
                            </span>';
                return $html;
            })
            ->rawColumns(['action','attachment_url'])
            ->make(true);
    }

    public function update($id, array $data)
    {
        DB::beginTransaction();
        try {
            $template = $this->mainRepository->find($id);
            $attachments = [
                'attachment' => ['file' => @$data['attachment'], 'file_name' => str_replace(' ', '_', $template->name)],
            ];
            foreach ($attachments as $key => $value) {
                if (@$data[$key]) {
                    if (($template->is_change === 1) && @$template->$key && file_exists(storage_path('app/public/' . $template->$key))) {
                        unlink(storage_path('app/public/'.$template->$key));
                    }

                    $file = @$data[@$key];
                    $originalName = $file->getClientOriginalName();
                    $extension = $file->getClientOriginalExtension();
                    $newFileName = @$value['file_name'] . uniqid() . '_.' . $extension;
                    $filePath = $file->storeAs('templates/new', $newFileName, 'public');
                    $data[@$key] = $filePath;
                }

                if (@$data['old_'.$key]) {
                    $data[$key] = $data['old_'.$key];
                    unset($data['old_'.$key]);
                }
            }

            $data['is_change'] = 1;
            $this->mainRepository->update($id, $data);
            $redirect = redirect()->intended(URL::route('template.index'));
            DB::commit();
            return $this->setStatus(true)
                ->setCode(200)
                ->setResult(['redirect' => $redirect->getTargetUrl()])
                ->setMessage("Template Berhasil diperbaharui");
        } catch (Exception $e) {
            DB::rollBack();
            return $this->exceptionResponse($exception);
        }
    }
}
